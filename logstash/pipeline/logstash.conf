input {

	beats {
		port => 5045
		tags => ["Windows Server"]
	}

	tcp {
		port => 5044
		codec => plain {charset => "UTF-8"}
	}
	
}

filter {
	#if [host] not in ["10.0.31.81","10.0.31.91","10.0.31.83","10.0.114.70","10.0.55.86","10.0.55.74","10.0.31.34","10.0.41.44"] {
	#	drop{}
	#}
	
	# Add single field for specific platform
	# ITD
	if [host] in ["10.0.31.81","10.0.31.91","10.0.31.83"] {
		mutate {
			add_field => {"platform" => "itd"}
		}
	}
	
	# DTC, DTC included beat delivery so that's why this condition has [host][ip][0]
	if [host] in ["10.0.55.74","10.0.31.34","10.0.41.44","10.0.55.86"] {
	
		mutate {
			add_field => {"platform" => "dtc"}
		}
	}

	# Grok filter for Windows Server 10.0.55.74, 10.0.31.34
	if "Windows Server" in [tags] { 
		mutate {
			add_field => ["src_ip", "%{[host][ip][0]}"]	
		 	add_field => ["platform", "dtc"]
			add_field => ["_rawlog", "%{message}"]
		}
		# pattern for dtc logs only
		# TODO: add logs example
		
		grok {
			match => {"message" =>	["(?m)%{WORD:level}  %{TIMESTAMP_ISO8601:time} .* \[%{UUID:requestId}\] \[%{DATA:function}\]\[%{DATA:status}\]%{GREEDYDATA:message}",
			"(?m)%{WORD:level}%{SPACE}%{TIMESTAMP_ISO8601:time} .* \[%{NUMBER:number}\]%{SPACE}\[%{DATA:function}\]\[%{DATA:status}\]%{GREEDYDATA:message}",
			"(?m)%{WORD:level}%{SPACE}%{TIMESTAMP_ISO8601:time} .* \[%{UUID:requestId}\] %{DATA:function} \[{%DATA:status}\]%{SPACE}%{GREEDYDATA:message}",
			"(?m)%{WORD:level}%{SPACE}%{TIMESTAMP_ISO8601:time} %{DATA:execution_time} %{WORD:number} %{WORD:level}%{SPACE}\- %{DATA:function} \=\=\> %{DATA:status}: %{GREEDYDATA:message}",
			"\[%{TIMESTAMP_ISO8601:time}\] %{DATA:function} \- %{DATA:status}: %{WORD:level}: %{GREEDYDATA:message}",
			"\[%{TIMESTAMP_ISO8601:time}\] %{DATA:function} \- \[%{UUID:requestId}\]%{DATA:status}: %{WORD:level}%{SPACE}%{GREEDYDATA:message}",
			"\[%{TIMESTAMP_ISO8601:time}\] %{DATA:function} \- %{DATA:status}: %{GREEDYDATA:message}",
			"\[%{TIMESTAMP_ISO8601:time}\] %{DATA:function} \- %{DATA:status} %{GREEDYDATA:message}"]}
			overwrite => [ "message" ]
		}
	} else {

		# multiline { 
		# 	pattern => "^\["
		# 	what => "previous"
		# 	negate => true
		# }

		mutate {
			add_field => ["src_ip", "%{host}"]
			remove_field => [ "host" ]
			add_field => ["_rawlog", "%{message}"]
		}
		
		grok {
			match => {"message" => ["(?m)\[%{TIMESTAMP_ISO8601:time}\] %{DATA:function}\ - \[(?<requestId>([a-f0-9]{8}(-[a-f0-9]{4}){4}[a-f0-9]{8}))\](?<status>(\[(.+)\])):%{GREEDYDATA:message}",
			"(?m)\[%{TIMESTAMP_ISO8601:time}\] %{DATA:function}\ - (?<status>(\[(.+)\]))(.+)(?<level>call) %{GREEDYDATA:message}",
			"(?m)\[%{TIMESTAMP_ISO8601:time}\] %{DATA:function}\ - (?<status>(\[(.*?)\])+)\W*(?<level>RESPONSE|Response|Error code|Pool Status|Recieved data|Input|OutPut|Output|resultCode|ResultCode|REQUEST)\:*%{GREEDYDATA:message}",
			"(?m)\[%{TIMESTAMP_ISO8601:time}\] %{DATA:function}\ - (?<status>\[(.*?)\])\W+%{WORD:level}(\:|\s+string\:) %{GREEDYDATA:message}",
			"(?m)\[%{TIMESTAMP_ISO8601:time}\] %{DATA:function}\ - (?<status>[^\:\s]*|\[(.*?)\])%{GREEDYDATA:message}"]}
			overwrite => [ "message" ]
		}
	}

	date {
		timezone => "Asia/Ho_Chi_Minh"
		match => [ "time", "ISO8601", "yyyy-MM-dd HH:mm:ss" ]
		target => "@timestamp"
		locale => "en"
	}
	# For further understading why I doing this https://www.elastic.co/guide/en/logstash/7.17/plugins-outputs-elasticsearch.html
	# Using one elasticsearch output is much more efficicent (the documentation said so)
	# @metadata usage: https://www.elastic.co/guide/en/logstash/7.17/event-dependent-configuration.html#metadata


	# if "dtc" in [platform] {
	#	mutate {add_field => {"[@metadata][target_index] => "dtc-%{+YYYY.MM.dd}"}}
	#}else if "itd" in [platform]{
	#	mutate {add_field => {"[@metadata][target_index] => "itd-%{+YYYY.MM.dd}"}}
	#}else {
	#   mutate {add_field => {"[@metadata][target_index] => "unknown-%{+YYYY.MM.dd}"}}
	#}
}

output {

	elasticsearch{
		hosts => ["https://es01:9200","https://es02:9200","http://es03:9200"]
		ssl => true
		user => elastic
		password => elastic
		cacert => "config/certs/ca.crt"
		codec => plain { charset=>"UTF-8" }

	}
	
	# #If platform was dtc send it to dtc-* index
	# if "dtc" in [platform] {
	# 	elasticsearch {
	# 		hosts => ["https://es01","https://es02", "https://es03"]
	# 		ssl => true
	# 		ecs_compatibility => disabled
	# 		user => elastic
	# 		password => ${ELASTIC_PASSWORD}
	# 		# cacert => "config/certs/ca/ca.crt"
	# 		codec => plain { charset=>"UTF-8" }
	# 		# Index should be fixed 
	# 		index => "dtc"
	# 	}
	# } else {
	# 	elasticsearch {
	# 		hosts => ["https://es01","https://es02", "https://es03"]
	# 		ssl => true
	# 		ecs_compatibility => disabled
	# 		user => elastic
	# 		password => ${ELASTIC_PASSWORD}
	# 		# cacert => " config/certs/ca/ca.crt"
	# 		codec => plain { charset=>"UTF-8" }
	# 		# index => "%{[@metadata][target_index]}"
	# 	}
	# }
}